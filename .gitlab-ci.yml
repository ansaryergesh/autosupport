stages:
  - build
  - docker-build
  - deploy
  - cleanup
  - manual

build:
  image: node:16.16-alpine
  stage: build
  tags:
      - docker
  script:
    - npm install --legacy-peer-deps
    - npm run build
  artifacts:
    paths:
      - dist/
    expire_in: 1 day
  only:
    - master
    - main

docker-build:
  stage: docker-build
  image: docker:20
  services:
    - name: docker:dind
      alias: thedockerhost
  variables:
    DOCKER_HOST: tcp://thedockerhost:2375/
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ''
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - docker build -t $CI_REGISTRY_IMAGE:latest .
    - docker push $CI_REGISTRY_IMAGE:latest
  only:
    - master
    - main

.deploy_template: &deploy_configuration
  image: cytopia/ansible
  variables:
    MESSAGE: 'template'
  before_script:
    - apk update && apk add openssh && apk add curl && apk add rsync && apk add git
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H "$SSH_HOST" >> ~/.ssh/known_hosts
    - ssh-keyscan -H "$SSH_TEST_HOST" >> ~/.ssh/known_hosts
#  after_script:
#    - 'curl -X POST -H "Content-Type: application/json" -d "{\"chat_id\": \"${CHAT_ID}\", \"text\": \"CI: front-admin ${MESSAGE}\"}" https://api.telegram.org/bot${BOT_TOKEN}/sendMessage'

deploy-test:
  <<: *deploy_configuration
  stage: manual
  tags:
    - deploy
  variables:
    MESSAGE: 'updated and deployed to server'
  script:
    - echo front-admin
    #    - ansible all -i "$SSH_HOSOST," --user "$SSH_USER" -m ansible.builtin.shell -a "cd test-swand; docker-compose pull front-admin; docker-compose up -d --build --remove-orphans front-admin"
    - ssh $SSH_USER@$SSH_TEST_HOST "cd /home/pam/test-swand; docker compose pull front-admin; docker compose up -d --build --remove-orphans front-admin"
  only:
    - master
    - main
  when: manual

deploy-prod:
  <<: *deploy_configuration
  dependencies:
    - build
  stage: manual
  tags:
    - deploy
  script:
#    - echo front-admin
#    - scp build/libs/*.jar $SSH_USER@$SSH_HOST:/opt/autosupport/app.jar
#    - ssh $SSH_USER@$SSH_HOST "sudo systemctl restart autosupport"
    - echo "Updating packages and installing rsync on the server..."
    - ansible -i "${SSH_HOST}," -u "${SSH_USER}" -m raw -a "apt-get update && apt-get install -y rsync" --private-key=<(echo "$SSH_PRIVATE_KEY") all
    - echo "Deploying front-admin to the server with versioning..."
    - export RELEASE_VERSION=$(git rev-parse --short HEAD)
    - ansible -i "${SSH_HOST}," -u "${SSH_USER}" -m synchronize -a "src=./dist/ dest=/usr/share/nginx/releases/admin/$RELEASE_VERSION delete=yes" --private-key=<(echo "$SSH_PRIVATE_KEY") all
    - ansible -i "${SSH_HOST}," -u "${SSH_USER}" -m file -a "path=/usr/share/nginx/admin src=/usr/share/nginx/releases/admin/$RELEASE_VERSION state=link" --private-key=<(echo "$SSH_PRIVATE_KEY") all
  only:
    - main
    - master
  when: manual

restart:
  <<: *deploy_configuration
  variables:
    MESSAGE: 'service restarted'
  stage: manual
  tags:
    - deploy
  script:
    #    - ansible all -i "$SSH_HOST," --user "$SSH_USER" -m ansible.builtin.shell -a "cd /home/pam/test-swand; docker-compose restart front-admin"
    - ssh $SSH_USER@$SSH_TEST_HOST "cd /home/pam/test-swand; docker compose restart front-admin"

  when: manual

stop:
  <<: *deploy_configuration
  variables:
    MESSAGE: 'service stopped'
  stage: manual
  tags:
    - deploy
  script:
    #    - ansible all -i "$SSH_HOST," --user "$SSH_USER" -m ansible.builtin.shell -a "cd /home/pam/test-swand; docker-compose stop front-admin"
    - ssh $SSH_USER@$SSH_TEST_HOST "cd /home/pam/test-swand; docker compose stop front-admin"
  when: manual

cleanup:
  <<: *deploy_configuration
  variables:
    MESSAGE: 'service cleaned'
  stage: manual
  tags:
    - deploy
  script:
    #    - ansible all -i "$SSH_HOST," --user "$SSH_USER" -m ansible.builtin.shell -a "cd /home/pam/test-swand; docker-compose down front-admin"
    - ssh $SSH_USER@$SSH_TEST_HOST "cd /home/pam/test-swand; docker compose down front-admin"
  when: manual

purge:
  <<: *deploy_configuration
  variables:
    MESSAGE: 'service purged'
  stage: manual
  tags:
    - deploy
  script:
    #    - ansible all -i "$SSH_HOST," --user "$SSH_USER" -m ansible.builtin.shell -a "cd /home/pam/test-swand; docker-compose down -v front-admin"
    - ssh $SSH_USER@$SSH_TEST_HOST "cd /home/pam/test-swand; docker compose down -v front-admin"
  when: manual
